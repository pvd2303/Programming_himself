# Глава 19. Управление версиями
# Система управления версиями
# Git и SVN - популярные системы управлениями версиями
# GitHub - веб-сайт, хранящий программное обеспечение, код в облаке.

# Репозитории**********
"""
Репозиторий - это структура данных, созданная системой
управления версиями, наподобие Git, которая отслеживает
все изменения в программистском проекте.
Структура данных - это способ организовывать и хранить
информацию: списки и словари являются примерами структур
данных
"""

"""
на Github мой центральный репозиторий:
pvd2303
pvd23@ukr.net
Pvd230360GIT
Открытые репозитории:
self-taught
hangman

Чтобы получить ссылки на загрузку и выгрузку в центральный
репозиторий нужно в bash из локального каталога 
набрать:
$ git remote -v
для hangman получил:
https://github.com/pvd2303/hangman.git (fetch)-получать данные
https://github.com/pvd2303/hangman.git (push)- помещать данные

$ git status - отображает текущее состояние вашего 
проекта относительно вашего репозитория, чтобы вы 
могли решить, какие файлы нндексировать. Эта команда 
выводит те файлы в локальном репозитории, которые 
отличаются от файлов в центральном репозитории. Когда 
файл не проиндексирован, он выделяется красным, когда 
проиндексирован — зеленым.

ПЕРВОЕ ДЕЙСТВИЕ
$ git add <имя_файла> - индексирование файла!!!
$ git add Intuition.py
$ git reset <путь к файлу> - можно отменить индексацию
файла, не внося изменений в центральный репозиторий
$ git reset Intuition.py

ВТОРОЕ ДЕЙСТВИЕ
$ git commit -m
Данная команда создает версию вашего проекта, 
сохраняемую Git. Флаг -m значит, что вы хотите 
добавить к состоянию сообщение, которое поможет 
вам запомнить вносимые изменения и их причины 
(это сообщение похоже на комментарий).

ТРЕТЬЕ ДЕЙСТВИЕ
$ git push origin master - внесение изменений в свой 
центральный репозитарий
"""
#page 167
# Пример извлечения данных
"""
$ git pull origin master
"""
# Откат версий**********
"""
Git сохраняет ваш проект каждый раз. как вы сохраняете 
состояние файла. Вы можете откатиться к любому 
предыдущему состоянию — "отмотать назад" свой проект. 
К примеру, можно вернуть проект к состоянию, сделанному 
на прошлой неделе. Все ваши файлы и папки останутся 
такими же. какими они были на прошлой неделе. 
Тогда вы можете перепрыгнуть к более свежему 
состоянию. У каждого состояния есть "номер" — уникальная 
последовательность символов, используемая Git для 
идентификации состояния.
Вы можете просмотреть историю состояний вашего 
проекта с помощью команды 
$git log
, выводящей все состояния.
Вы можете изменить состояние вашего проекта, передав 
номер состояния в качестве параметра команде 
$ git checkout <номер состояния>
"""
# Команда git diff**********
"""
Команда git diff демонстрирует разницу между файлом 
в локальном и в центральном репозитории.
Дальнейшие шаги:
www.codeschool.com/learn/git
"""
# ПРАКТИКУМ к главе 19
# page 171







